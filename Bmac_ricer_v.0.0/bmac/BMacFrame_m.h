//
// Generated file, do not edit! Created by nedtool 5.2 from inet/linklayer/bmac/BMacFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_BMACFRAME_M_H
#define __INET_BMACFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
    #include "inet/linklayer/base/MACFrameBase_m.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/bmac/BMacFrame.msg:28</tt> by nedtool.
 * <pre>
 * packet BMacFrame extends MACFrameBase
 * {
 *     MACAddress src_Mac;
 *     MACAddress destination_Mac;
 * }
 * </pre>
 */
class INET_API BMacFrame : public ::inet::MACFrameBase
{
  protected:
    MACAddress src_Mac;
    MACAddress destination_Mac;

  private:
    void copy(const BMacFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BMacFrame&);

  public:
    BMacFrame(const char *name=nullptr, short kind=0);
    BMacFrame(const BMacFrame& other);
    virtual ~BMacFrame();
    BMacFrame& operator=(const BMacFrame& other);
    virtual BMacFrame *dup() const override {return new BMacFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual MACAddress& getSrc_Mac();
    virtual const MACAddress& getSrc_Mac() const {return const_cast<BMacFrame*>(this)->getSrc_Mac();}
    virtual void setSrc_Mac(const MACAddress& src_Mac);
    virtual MACAddress& getDestination_Mac();
    virtual const MACAddress& getDestination_Mac() const {return const_cast<BMacFrame*>(this)->getDestination_Mac();}
    virtual void setDestination_Mac(const MACAddress& destination_Mac);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BMacFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BMacFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_BMACFRAME_M_H

